{"version":3,"file":"component---src-pages-using-ssr-js-06dd4ce7c2f8249b1c94.js","mappings":"uKAsDA,IAxCe,SAAC,GAAkB,IAAD,EAAfA,EAAe,EAAfA,SACVC,GAAOC,EAAAA,EAAAA,gBAAe,cAU5B,OACE,gCACE,gBAAC,IAAD,CAAQC,WAAW,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,UACnB,uBACEC,MAAO,CACLC,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,4BAAOV,GACP,0BACEO,MAAO,CACLI,UAAU,SAFd,MAKK,IAAIC,MAAOC,cALhB,mBAOE,qBAAGC,KAAK,4BAAR,e,uDC/BV,SAASC,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMZ,EAAS,EAATA,MAC9BF,GAASF,EAAAA,EAAAA,gBAAe,YAAxBE,KAcFe,EAAkBH,GAAeZ,EAAKC,aAAaW,YACnDI,EAAY,UAAGhB,EAAKC,oBAAR,aAAG,EAAmBC,MAExC,OACE,gBAAC,EAAAe,OAAD,CACEC,eAAgB,CACdL,KAAAA,GAEFX,MAAOA,EACPiB,cAAeH,EAAY,QAAWA,EAAiB,KACvDF,KAAM,CACJ,CACEM,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASnB,GAEX,CACEoB,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAArB,EAAKC,oBAAL,eAAmBsB,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAASnB,GAEX,CACEkB,KAAK,sBACLC,QAASN,IAEXS,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,wEC3DA,UAvBiB,SAAC,GAAoB,IAAlBc,EAAiB,EAAjBA,WAClB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKxB,MAAM,cACX,sCACA,uBACEC,MAAO,CAAEwB,MAAO,SAChBC,IAAI,eACJC,IAAKH,EAAWI,UAElB,2FACA,2DACkC,IAChC,qBAAGpB,KAAK,oFAAR,6CAFF,KAOA,gBAAC,EAAAqB,KAAD,CAAMC,GAAG,KAAT","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/using-ssr.js"],"sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header/header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `2rem`,\n          }}\n        >\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst UsingSSR = ({ serverData }) => {\n  return (\n    <Layout>\n      <Seo title=\"Using SSR\" />\n      <h1>SSR page</h1>\n      <img\n        style={{ width: \"300px\" }}\n        alt=\"A random dog\"\n        src={serverData.message}\n      />\n      <p>Welcome to a server side rendered page with a random dog photo</p>\n      <p>\n        To learn more, head over to our{\" \"}\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n          documentation about Server Side Rendering\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport default UsingSSR\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breeds/image/random`)\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    }\n  }\n}\n"],"names":["children","data","useStaticQuery","siteTitle","site","siteMetadata","title","style","margin","maxWidth","padding","marginTop","Date","getFullYear","href","Seo","description","lang","meta","metaDescription","defaultTitle","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","serverData","width","alt","src","message","Link","to"],"sourceRoot":""}